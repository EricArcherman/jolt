// Generated from HyperKZG small tests.
pub const POINT_BYTES: [u8; 72] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];
pub const EVAL_BYTES: [u8; 32] = [
    0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];
pub const V_POS_BYTES: [u8; 88] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x53, 0x70, 0xf2, 0xee, 0x18, 0x3d, 0x60, 0x13, 0xea, 0x65, 0xf4, 0xf7, 0x30, 0xe2, 0xc7,
    0xbf, 0xd4, 0x62, 0xdf, 0x8a, 0xbe, 0xec, 0x65, 0xed, 0x4b, 0x2d, 0x07, 0xb5, 0x3a, 0xa0, 0x2c,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x74, 0xff, 0x04, 0x17, 0x29, 0xa5, 0xfc,
    0x30, 0xdb, 0x03, 0x9a, 0xf9, 0x27, 0x09, 0xf5, 0x7d, 0x8b, 0xef, 0x3d, 0x2e, 0xa9, 0x3e, 0xb5,
    0x8d, 0x1c, 0x6b, 0x41, 0x2c, 0x89, 0x5e, 0x0a,
];
pub const V_NEG_BYTES: [u8; 88] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x2a, 0xc2, 0x7a, 0x75, 0xb5, 0x1e, 0xee, 0xeb, 0x16, 0x03, 0x6a, 0x51, 0x48, 0x2f, 0x6b, 0x84,
    0x38, 0x06, 0x98, 0x53, 0xfa, 0xcd, 0xa8, 0xda, 0xd1, 0x46, 0xb9, 0xfb, 0xa2, 0xe5, 0xe2, 0xdf,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xef, 0x4f, 0x6e, 0xca, 0x07, 0xfa, 0x2d,
    0x87, 0x75, 0x42, 0x1b, 0x88, 0x5a, 0x4e, 0x67, 0xaa, 0xa7, 0xf9, 0x0b, 0x4b, 0x10, 0x31, 0xdb,
    0xb6, 0xc5, 0x8a, 0x52, 0xc3, 0x76, 0xa1, 0xff,
];
pub const V_BYTES: [u8; 88] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x16, 0x18, 0x28, 0xe8, 0x11, 0x24, 0x9d, 0x95, 0x63, 0x4f, 0x95, 0x32, 0x9a, 0x15, 0x85, 0x5c,
    0xe4, 0x71, 0xf5, 0x68, 0xcf, 0x1e, 0x74, 0xfc, 0x27, 0x8c, 0x54, 0x57, 0x34, 0x5c, 0x60, 0x7f,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xe6, 0xd7, 0x01, 0x45, 0x55, 0x3c, 0x00,
    0x56, 0xd2, 0x9d, 0xf4, 0xaf, 0x55, 0x6c, 0x35, 0x6d, 0x73, 0xbd, 0x75, 0x54, 0x39, 0xf5, 0x28,
    0x55, 0xe7, 0xe0, 0xdd, 0x48, 0xa2, 0x8f, 0x28,
];
pub const COM_BYTES: [u8; 88] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x30, 0x5c, 0xed, 0x4c, 0xc9, 0x17, 0xf4, 0x0f, 0xeb, 0x65, 0xc7, 0x54, 0xd3, 0xfd, 0xeb,
    0xd4, 0x24, 0x13, 0xb9, 0x14, 0xaa, 0xb1, 0x7d, 0x76, 0xcf, 0xfa, 0x1a, 0x78, 0x5b, 0xba, 0x43,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0x84, 0xf6, 0x8e, 0xb3, 0x25, 0xcc,
    0x83, 0x49, 0x24, 0xc0, 0x22, 0x3b, 0x78, 0xaa, 0x96, 0xcf, 0xbb, 0xdb, 0x70, 0xb1, 0x63, 0x9c,
    0x01, 0x3b, 0xa7, 0xe0, 0xb7, 0xd9, 0x8d, 0x3f,
];
pub const W_BYTES: [u8; 248] = [
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0xd2, 0xe8, 0x06, 0x57, 0x75, 0x3a, 0xfb, 0x56, 0x14, 0x51, 0xef, 0x2e, 0x78, 0x6d, 0xc2,
    0x60, 0x39, 0x60, 0xb7, 0x97, 0x43, 0xb2, 0xed, 0xde, 0x40, 0x43, 0x4d, 0x1b, 0x6b, 0x71, 0x62,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xfc, 0x07, 0x22, 0x98, 0x06, 0x25, 0xf3,
    0xda, 0x20, 0x33, 0x2a, 0x05, 0x83, 0xc5, 0x96, 0xa7, 0x57, 0x53, 0xea, 0xef, 0xed, 0x07, 0x90,
    0x91, 0xbc, 0xa1, 0x6f, 0xdd, 0xd9, 0xed, 0xa9, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x06, 0x16, 0x19, 0x67, 0x88, 0x05, 0xd9, 0x72, 0xd4, 0xd5, 0x48, 0xfb, 0xd9, 0xa5, 0xdc,
    0x8f, 0x8a, 0x7d, 0xf8, 0x06, 0x19, 0x09, 0x84, 0x0e, 0x11, 0xa0, 0xdc, 0x66, 0x5a, 0xd9, 0xfa,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x14, 0xa3, 0x0b, 0x0c, 0x63, 0x61, 0x47,
    0xc4, 0xb9, 0x04, 0x22, 0x7b, 0x86, 0x71, 0x21, 0x0a, 0x0f, 0x65, 0x5a, 0x89, 0x49, 0x98, 0xaa,
    0xdb, 0x8e, 0x8a, 0x3a, 0x58, 0x61, 0xdc, 0xf8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x22, 0x7b, 0x59, 0x7d, 0x14, 0x15, 0x7a, 0xce, 0x59, 0x3e, 0xfe, 0xe8, 0xb2, 0xf1, 0xac, 0xff,
    0x36, 0x98, 0x40, 0x0d, 0xa6, 0x2c, 0x2a, 0x6b, 0x1f, 0x8e, 0x8d, 0x0e, 0xdd, 0xd5, 0xb0, 0x02,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x0d, 0xa6, 0xcc, 0x2e, 0xfa, 0x24, 0x81,
    0xa5, 0x7d, 0x98, 0x29, 0x08, 0x29, 0x22, 0x97, 0x2a, 0x08, 0xa3, 0xe1, 0xf0, 0x3d, 0xb5, 0x40,
    0x6f, 0xb8, 0x44, 0x7f, 0x31, 0xdc, 0x18, 0x62,
];

pub const VK_G1_BYTES: [u8; 88] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x2f, 0x77, 0x0c, 0x9d, 0x84, 0x4c, 0x3c, 0xd5, 0x51, 0xdf, 0x50, 0x87, 0xb9, 0xa8, 0x4d,
    0xd9, 0xec, 0x15, 0xd6, 0x43, 0x81, 0x40, 0x41, 0xe1, 0x8f, 0x82, 0xe0, 0x12, 0x80, 0xcf, 0x6f,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x09, 0x2d, 0x55, 0xb8, 0x9a, 0xe5, 0xf5,
    0xd7, 0xf5, 0x70, 0xbc, 0xa0, 0xbf, 0x03, 0x69, 0x70, 0x05, 0x1c, 0x33, 0xf1, 0x49, 0x4a, 0xcf,
    0x7c, 0x30, 0xc1, 0xc5, 0xa4, 0xf2, 0x80, 0xbb,
];
pub const VK_G2_BYTES: [u8; 168] = [
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x08, 0xae, 0xe6, 0xcc, 0xe7, 0xb7, 0x43, 0xa7, 0xa8, 0xc2, 0x94, 0x64, 0xf0, 0x50, 0x19,
    0xc1, 0x96, 0x46, 0xc2, 0x8f, 0xbb, 0x2e, 0xe0, 0xe7, 0x6f, 0x07, 0x1a, 0x19, 0x0a, 0x6a, 0x38,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x84, 0xdf, 0xa0, 0x52, 0x5d, 0x1e, 0x79,
    0xea, 0x6a, 0x64, 0xf6, 0x2b, 0x1c, 0x6a, 0x2d, 0xb2, 0x9f, 0x10, 0xce, 0xb3, 0x90, 0x82, 0x37,
    0xa5, 0xcb, 0x40, 0xc8, 0x01, 0x77, 0x89, 0x07, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x22, 0x01, 0x8f, 0x06, 0x83, 0x8c, 0x43, 0xd4, 0x16, 0x35, 0x5e, 0x1e, 0xfb, 0x7f, 0xe9,
    0x77, 0xf4, 0x8f, 0x36, 0x56, 0x50, 0x24, 0xf3, 0x47, 0x22, 0x92, 0x34, 0x90, 0x23, 0x31, 0xe2,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xce, 0xbd, 0x47, 0x4d, 0xaa, 0xc3, 0xfb,
    0x13, 0x4e, 0x80, 0x1a, 0x53, 0xd1, 0xbb, 0x05, 0x79, 0xc0, 0x0c, 0xdb, 0x9c, 0x5d, 0xb5, 0x92,
    0x42, 0xd7, 0xb1, 0x76, 0x69, 0x27, 0x8d, 0x17,
];
pub const VK_BETA_G2_BYTES: [u8; 168] = [
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x26, 0x65, 0xdb, 0x07, 0x85, 0xd0, 0xac, 0x2f, 0x22, 0xfc, 0x48, 0xa9, 0xb0, 0x04, 0x9e,
    0xe2, 0x85, 0xd1, 0xaf, 0xd1, 0x95, 0xde, 0x3e, 0x52, 0x74, 0xbf, 0x30, 0xa4, 0x9d, 0x0a, 0xfc,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x32, 0x86, 0x7e, 0xcc, 0x64, 0xd2, 0xa4,
    0xae, 0x27, 0x06, 0x39, 0xa1, 0x5b, 0x79, 0xd2, 0xb1, 0xef, 0xc2, 0xaf, 0x94, 0x1f, 0x92, 0xff,
    0xd2, 0x6b, 0xd4, 0xf2, 0x07, 0x48, 0x18, 0xd2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x2a, 0x64, 0xf0, 0xaf, 0x8c, 0xfc, 0x2c, 0xd3, 0x34, 0x1a, 0xb1, 0xfb, 0x76, 0xca, 0xbb, 0x26,
    0xab, 0x32, 0xd3, 0x17, 0x70, 0x18, 0x76, 0x66, 0x40, 0x7b, 0xa1, 0x1b, 0xea, 0x26, 0xab, 0x99,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc8, 0x05, 0x58, 0xa2, 0x02, 0x32, 0x91,
    0x3a, 0x32, 0xc5, 0xd5, 0x06, 0x52, 0x2c, 0x6d, 0xfa, 0x89, 0xdd, 0x24, 0xd2, 0x0b, 0x3c, 0x82,
    0x7a, 0x85, 0xf9, 0xc3, 0xcf, 0x72, 0xb4, 0x8c,
];
pub const C_G1_BYTES: [u8; 88] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x28, 0x4b, 0xcb, 0xcf, 0x4a, 0xe1, 0xfc, 0xc5, 0x81, 0x65, 0x4a, 0x7a, 0x33, 0x77, 0xdf, 0xe5,
    0x93, 0x4a, 0xf9, 0x7d, 0x89, 0x34, 0x9c, 0x54, 0x25, 0x7f, 0x0b, 0x6a, 0x33, 0x7f, 0x4c, 0x24,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xbf, 0x39, 0x12, 0x4f, 0xab, 0xa4, 0x50,
    0xaa, 0x56, 0xf4, 0x53, 0x6b, 0x78, 0x52, 0x0a, 0xb1, 0x84, 0xaf, 0xa3, 0xc6, 0xde, 0x91, 0x96,
    0x38, 0x71, 0xc2, 0x38, 0xc8, 0x79, 0x0f, 0xb0,
];

// Grand Product Sumcheck generated from Grand Product tests
// const LAYER_SIZE: usize = 1 << 4;
// const BATCH_SIZE: usize = 1;
// Can't compile this because of a conflict with solana-program.
//     use rand_core::RngCore;
//     use crate::poly::commitment::hyperkzg::HyperKZG;
//
//     #[test]
//     fn prove_verify_hyperkzg() {
//         const LAYER_SIZE: usize = 1 << 4;
//         const BATCH_SIZE: usize = 1;
//         let mut rng = test_rng();
//         let leaves: Vec<Vec<Fr>> = std::iter::repeat_with(|| {
//             std::iter::repeat_with(|| Fr::random(&mut rng))
//                 .take(LAYER_SIZE)
//                 .collect()
//         })
//             .take(BATCH_SIZE)
//             .collect();
//
//         let mut batched_circuit = <BatchedDenseGrandProduct<Fr> as BatchedGrandProduct<
//             Fr,
//             HyperKZG<Bn254>,
//         >>::construct(leaves);
//
//         let mut transcript: ProofTranscript = ProofTranscript::new(b"test_transcript");
//
//         let (proof, r_prover) = <BatchedDenseGrandProduct<Fr> as BatchedGrandProduct<
//             Fr,
//             HyperKZG<Bn254>,
//         >>::prove_grand_product(&mut batched_circuit, &mut transcript, None);
//         let claims =
//             <BatchedDenseGrandProduct<Fr> as BatchedGrandProduct<Fr, HyperKZG<Bn254>>>::claims(
//                 &mut batched_circuit,
//             );
//
//         serialize_and_print_hex("GRAND_PRODUCT_BATCH_PROOFS", &proof.layers);
//         serialize_and_print_hex("GRAND_PRODUCT_CLAIMS", &claims);
//         serialize_and_print_hex("GRAND_PRODUCT_R_PROVER", &r_prover);
//     }
//
//     fn serialize_and_print_hex<T: ark_serialize::CanonicalSerialize>(name: &str, value: &T) {
//         let compress: bool = false;
//         let mut bytes = Vec::new();
//         if compress {
//             value.serialize_compressed(&mut bytes).unwrap()
//         } else {
//             value.serialize_uncompressed(&mut bytes).unwrap();
//         }
//         print_hex_array(name, &bytes);
//     }
//
//     fn print_hex_array(name: &str, bytes: &[u8]) {
//         print!("pub const {}: [u8; {}] = [", name, bytes.len());
//         for (i, byte) in bytes.iter().enumerate() {
//             if i % 16 == 0 {
//                 print!("\n    ");
//             }
//             print!("0x{:02x}, ", byte);
//         }
//         println!("\n];");
//     }
pub const GRAND_PRODUCT_BATCH_PROOFS: [u8; 984] = [
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x66, 0xd1, 0x83, 0x42, 0x99, 0x78, 0x5b,
    0x20, 0xf0, 0x34, 0xea, 0x5d, 0xcf, 0x58, 0xe5, 0xdf, 0x26, 0xdc, 0x82, 0x24, 0x9d, 0xa8, 0x9e,
    0x4e, 0x35, 0x70, 0x48, 0x45, 0x2e, 0xd6, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xed, 0x53, 0x08, 0x59, 0x68, 0xe0, 0x26, 0xda, 0xac, 0x49, 0x3d, 0xea, 0x7f, 0x93, 0x0d, 0xe2,
    0x72, 0x72, 0x23, 0xe3, 0xcc, 0xad, 0x87, 0x97, 0x32, 0x2d, 0x00, 0xcb, 0x23, 0x50, 0xbd, 0x0d,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x52, 0xe7, 0x65, 0x2c, 0xc2, 0xfc, 0xb3, 0x2e, 0x07, 0x49, 0x33, 0x72, 0x1f, 0xf8, 0xf0, 0xf7,
    0xe1, 0x1e, 0xed, 0xd8, 0xe2, 0xd9, 0xfb, 0x84, 0x01, 0x67, 0xac, 0xde, 0x2d, 0x0d, 0x46, 0x04,
    0x8f, 0xdf, 0x4c, 0xfb, 0x63, 0xce, 0x20, 0xd1, 0xa0, 0xb5, 0x07, 0xe6, 0x6c, 0x04, 0x9f, 0x7f,
    0x1b, 0xb5, 0xfd, 0xd6, 0xc1, 0x04, 0xab, 0xcb, 0x12, 0x0b, 0x92, 0x55, 0x42, 0x07, 0x05, 0x1f,
    0xfa, 0x2a, 0x97, 0x1a, 0x9e, 0xd9, 0x4b, 0xf9, 0x2a, 0x8a, 0x88, 0x6b, 0x74, 0xcc, 0x56, 0xa6,
    0xcd, 0x34, 0x36, 0xa8, 0xc9, 0x38, 0x5b, 0xc0, 0x19, 0x73, 0x51, 0x20, 0xca, 0xee, 0x4f, 0x2f,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x62, 0x69, 0x76, 0x70, 0x1b, 0xdb, 0x3f,
    0xc6, 0xae, 0xcc, 0x35, 0xad, 0xd5, 0x8f, 0xc7, 0x11, 0x08, 0x44, 0xf2, 0x4f, 0x6f, 0x22, 0x62,
    0x3d, 0xbd, 0xd3, 0x2f, 0x47, 0x5c, 0x3b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x56, 0x49, 0x29, 0x21, 0xcd, 0x7b, 0x75, 0x24, 0x74, 0xb8, 0x9b, 0x36, 0xa9, 0xcd, 0xa8, 0x4a,
    0x92, 0x60, 0x18, 0x23, 0xb9, 0x7c, 0xd1, 0xa3, 0xc6, 0x3c, 0x24, 0x10, 0x7e, 0x4a, 0x0d, 0x17,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc6, 0xf3, 0x49, 0x43, 0xfd, 0x3e, 0x6b, 0xbe, 0xc9, 0x5c, 0xca, 0x03, 0xa6, 0x89, 0xc8, 0x41,
    0x03, 0x0e, 0x6d, 0x40, 0xb5, 0x10, 0x2a, 0xb7, 0x8e, 0x3e, 0x03, 0x92, 0x2c, 0x35, 0x6a, 0x28,
    0x9d, 0x1c, 0xf7, 0x9b, 0x12, 0x5c, 0x76, 0x48, 0xa0, 0x8b, 0x3e, 0x8b, 0xfb, 0x97, 0xe6, 0x03,
    0xd4, 0xe5, 0x23, 0x67, 0x98, 0xfe, 0xdc, 0x5c, 0xc7, 0x42, 0x16, 0xd8, 0x78, 0xca, 0x9e, 0x05,
    0x08, 0x12, 0x84, 0xd1, 0x58, 0x9f, 0xe0, 0x9d, 0xa0, 0x33, 0x8b, 0x45, 0xd7, 0xfb, 0xa5, 0xdb,
    0x8a, 0x2b, 0x92, 0xec, 0xe2, 0x49, 0x9f, 0x94, 0x66, 0xda, 0x8a, 0xf1, 0x48, 0x82, 0x77, 0x1c,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x8a, 0xe0, 0x82, 0x39, 0x66, 0xe2, 0xf9,
    0xdf, 0x80, 0xb9, 0x7a, 0xf0, 0x55, 0xf7, 0x30, 0x66, 0x0c, 0x2a, 0xe6, 0x9f, 0xe7, 0xe8, 0xb7,
    0x56, 0xf2, 0x66, 0x82, 0x48, 0xed, 0x85, 0x27, 0x0b, 0xe6, 0x66, 0xd5, 0xf2, 0x5b, 0xad, 0x7c,
    0x65, 0xc4, 0xc7, 0xad, 0x24, 0x2c, 0x3b, 0x6c, 0x26, 0x01, 0x5c, 0xf9, 0x1b, 0xe3, 0x5c, 0x29,
    0x0c, 0xd4, 0x24, 0x2a, 0xda, 0x01, 0x9a, 0x1f, 0x1d, 0x1a, 0x4d, 0x7f, 0x18, 0xdf, 0x13, 0xab,
    0xf0, 0x32, 0x01, 0xbb, 0x43, 0x6d, 0xde, 0x59, 0x6a, 0x87, 0x13, 0x06, 0xc3, 0x11, 0xea, 0x5b,
    0xcf, 0x45, 0x33, 0x52, 0xc5, 0xa7, 0xcc, 0x23, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x79, 0x88, 0xbb, 0x24, 0x82, 0xbc, 0x6b, 0x85, 0xad, 0x7d, 0x28, 0x78, 0xef, 0xcf, 0x0f, 0x95,
    0x47, 0x64, 0x5b, 0xc6, 0xeb, 0xb9, 0xa5, 0xab, 0xdf, 0x8a, 0x21, 0x24, 0x4e, 0x6f, 0xac, 0x15,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x4f, 0xcf, 0x60, 0xf6, 0x15, 0x7f, 0xbc,
    0x47, 0x6e, 0x01, 0x84, 0x79, 0x29, 0x40, 0x82, 0x86, 0xf4, 0xd8, 0xc3, 0xd8, 0xdf, 0x9d, 0xcb,
    0xf5, 0x60, 0x95, 0x50, 0x6e, 0x4b, 0x11, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x90, 0x42, 0xfe, 0x0a, 0x6f, 0x52, 0xff,
    0x65, 0x1b, 0x96, 0x0f, 0x19, 0x66, 0xda, 0x5d, 0x57, 0x71, 0x05, 0x7a, 0x61, 0xb7, 0x34, 0x67,
    0x0c, 0xf6, 0x39, 0xd5, 0xef, 0xb7, 0x04, 0x17, 0xcc, 0x09, 0x9d, 0xd6, 0x98, 0xf7, 0xf0, 0xe6,
    0xdf, 0x81, 0x93, 0xd8, 0x27, 0x89, 0xa8, 0x69, 0x60, 0x6c, 0x74, 0xcc, 0x2b, 0x73, 0x41, 0xf4,
    0xfd, 0x1d, 0x68, 0x68, 0x57, 0x4a, 0x95, 0x1c, 0x0d, 0x8a, 0x81, 0x2a, 0xee, 0xcc, 0x2c, 0xa9,
    0x68, 0x18, 0x03, 0x6a, 0xf1, 0xbe, 0x34, 0x3f, 0x99, 0x1a, 0x7b, 0x65, 0xee, 0x73, 0x2f, 0xcc,
    0xff, 0x1d, 0x26, 0xba, 0xc9, 0x17, 0x10, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x07, 0x74, 0x57, 0xc2, 0xc5, 0x57, 0x0e, 0xa2, 0x79, 0xca, 0x5c, 0x04, 0x4f, 0xc7, 0x71,
    0x8e, 0xd7, 0xde, 0x6b, 0xc2, 0x7a, 0x0c, 0x81, 0x6a, 0x33, 0xc8, 0x11, 0x2a, 0xe4, 0x42, 0x08,
    0x4c, 0xa9, 0x8f, 0x8b, 0xda, 0xcd, 0x8f, 0x44, 0xff, 0xd9, 0x24, 0xe5, 0xca, 0x2c, 0x00, 0x2d,
    0xcd, 0x12, 0x8d, 0x9e, 0x49, 0xd0, 0x6c, 0x68, 0xfa, 0x93, 0x8f, 0x88, 0xe4, 0x8a, 0x71, 0x07,
    0x2f, 0xea, 0x0f, 0x64, 0xde, 0x72, 0xa4, 0x41, 0xfa, 0xc7, 0x29, 0x05, 0xcf, 0x3c, 0x06, 0x33,
    0x09, 0xe1, 0x69, 0x68, 0x2a, 0xdc, 0x47, 0xd4, 0xb5, 0x6f, 0xb4, 0x4e, 0x09, 0xb9, 0xdc, 0x20,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc2, 0xb5, 0x13, 0x2e, 0xa0, 0xc2, 0xd3,
    0xd1, 0x1c, 0x79, 0x62, 0x29, 0x10, 0x60, 0xc6, 0xa9, 0x56, 0x98, 0x77, 0x8b, 0xef, 0xe4, 0x08,
    0xd7, 0x7d, 0x38, 0x3f, 0xfa, 0x83, 0x95, 0x22, 0x98, 0x67, 0xf9, 0x72, 0xc7, 0x14, 0x9b, 0x94,
    0x2f, 0x36, 0x9e, 0xcb, 0x39, 0x26, 0x8b, 0x5e, 0xd7, 0xa2, 0xb8, 0x30, 0xab, 0x67, 0x21, 0x2a,
    0x23, 0x2c, 0xff, 0x5e, 0x75, 0xe0, 0x13, 0x03, 0xa5, 0x14, 0xad, 0x78, 0x66, 0xa8, 0x9f, 0x92,
    0x45, 0x08, 0xb5, 0x57, 0xd4, 0xb0, 0x32, 0x0f, 0x85, 0x6c, 0x95, 0xd6, 0x72, 0x9b, 0xc9, 0x55,
    0xef, 0xd1, 0x01, 0x1c, 0x7e, 0x8e, 0xd8, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x34, 0x68, 0xba, 0xd4, 0xb5, 0x4b, 0xf7, 0x34, 0xa5, 0x20, 0x86, 0x13, 0x24, 0x44, 0x35, 0xfa,
    0x51, 0xd9, 0xaf, 0xa2, 0x4e, 0x71, 0x5f, 0x35, 0x43, 0x2c, 0x12, 0xe7, 0x1d, 0xa7, 0x39, 0x06,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xca, 0x8f, 0x12, 0x81, 0x39, 0x9e, 0xbc,
    0x63, 0xf1, 0x83, 0x83, 0x55, 0xc7, 0xa9, 0x3d, 0xf9, 0xd5, 0x5b, 0x62, 0x89, 0x7e, 0x63, 0xb6,
    0xc4, 0xe4, 0x43, 0x95, 0xc0, 0x22, 0x79, 0x1d,
];
pub const GRAND_PRODUCT_CLAIMS: [u8; 40] = [
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xe5, 0x34, 0xce, 0x21, 0x19, 0x4a, 0x4f,
    0xe1, 0xe7, 0x6d, 0xf8, 0x87, 0x5b, 0xbc, 0x82, 0x71, 0x05, 0x63, 0xd8, 0x66, 0x66, 0x19, 0x03,
    0xc7, 0x71, 0x9d, 0x54, 0x0a, 0x62, 0x9b, 0x27,
];
pub const GRAND_PRODUCT_R_PROVER: [u8; 136] = [
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x02, 0xe7, 0x9d, 0x26, 0x1b, 0xcb, 0xc9,
    0x7a, 0xf0, 0xc3, 0x36, 0xa9, 0x21, 0x05, 0xfa, 0xcc, 0xb4, 0xa1, 0x66, 0xcf, 0x64, 0x6a, 0xd4,
    0xff, 0x71, 0xd2, 0x5f, 0x58, 0xf3, 0xc0, 0x00, 0xc0, 0x33, 0xb8, 0x95, 0x1c, 0x7e, 0xab, 0x1a,
    0xa5, 0x63, 0x9a, 0xc9, 0x97, 0x73, 0xa4, 0xcb, 0xfa, 0xb8, 0x46, 0x46, 0xcc, 0x96, 0x97, 0x03,
    0xe4, 0xc2, 0xd7, 0x01, 0x43, 0xcd, 0xf9, 0x12, 0xe6, 0x1b, 0x46, 0x25, 0xc4, 0x02, 0x1d, 0x61,
    0x3c, 0xdf, 0x46, 0x14, 0xc8, 0xaa, 0xde, 0xcc, 0x25, 0x1e, 0xf0, 0xef, 0x04, 0xab, 0x27, 0xfa,
    0xa7, 0x02, 0xb0, 0xec, 0xc0, 0x14, 0x0e, 0x11, 0x8b, 0x26, 0x50, 0xeb, 0xce, 0x47, 0x74, 0xad,
    0x74, 0x6f, 0x61, 0x19, 0x84, 0x23, 0x3f, 0x44, 0x24, 0x91, 0x30, 0x92, 0x01, 0x11, 0xea, 0x56,
    0xfc, 0xb0, 0x78, 0x2c, 0x21, 0x33, 0x23, 0x2e,
];
